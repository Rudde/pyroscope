--- src/core/curl_stack.h	2009-11-12 09:03:44.000000000 +0100
+++ src/core/curl_stack.h	2011-05-07 03:39:47.000000000 +0200
@@ -106,2 +106,5 @@
 
+  bool                ssl_verify_peer() const                { return m_ssl_verify_peer; }
+  void                set_ssl_verify_peer(bool s)            { m_ssl_verify_peer = s; }
+
   static void         global_init();
@@ -137,2 +140,3 @@
   std::string         m_httpCaCert;
+  bool                m_ssl_verify_peer;
 };
--- src/core/curl_stack.cc	2009-11-12 09:03:44.000000000 +0100
+++ src/core/curl_stack.cc	2011-05-07 03:39:47.000000000 +0200
@@ -53,3 +53,4 @@
   m_active(0),
-  m_maxActive(32) {
+  m_maxActive(32),
+  m_ssl_verify_peer(true) {
 
@@ -166,2 +167,5 @@
 
+  if (!m_ssl_verify_peer)
+    curl_easy_setopt(get->handle(), CURLOPT_SSL_VERIFYPEER, 0); 
+
   base_type::push_back(get);
--- src/command_network.cc	2009-11-12 09:19:40.000000000 +0100
+++ src/command_network.cc	2011-06-02 14:58:58.000000000 +0200
@@ -466,2 +466,6 @@
 
+  // backport from 0.8.8 r1206
+  ADD_COMMAND_SLOT("network.http.ssl_verify_peer",     call_unknown, rpc::object_void_fn(rak::make_mem_fun(httpStack, &core::CurlStack::ssl_verify_peer)), "i:", "");
+  ADD_COMMAND_SLOT("network.http.ssl_verify_peer.set", call_value,   rpc::object_value_fn(rak::make_mem_fun(httpStack, &core::CurlStack::set_ssl_verify_peer)), "i:i", "");
+
   ADD_COMMAND_VALUE_TRI("send_buffer_size",    rak::make_mem_fun(cm, &torrent::ConnectionManager::set_send_buffer_size), rak::make_mem_fun(cm, &torrent::ConnectionManager::send_buffer_size));
